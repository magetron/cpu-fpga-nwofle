Stages

* Ethernet rcv with FPG
  - careful when parsing the preamble, some NICs provide various length of preamble, or you can potentially miss couple of beats on new negotiations of speed
  - First major milestone with multiple attempts at using the Ethernet chip RXD

* Ethernet snd with FPGA
  - Issues to pay attention to
    - FCS, without correct FCS, NIC would just discard pkts
    - understand CRC32 comprehensively and implement full parallel process on each incremental 4 bytes
    - Payload length > minimum Ethernet II required length, NIC would also just discard pkts
    - correct endianess, other wise you wouldn't get MAC address in pkt right

* Major changes to core module to support forwarding instead of (read / display / output that's etherlab, read display output doens't necessarily have a clear correlation)
  - Finite State Machine Cycle

* upgrade rcv to support UDP
  - Lots and lots of parsing states coming in

* upgrade snd to support UDP
  - Same as above, increasing logic levels from FSM to final snd.

* Timing Issues! with more complicated parsing of pkts
  - Attempted different Place and Route strategies
  - Fixed with optimisations to reduce logic levels, store variables to utilise the slices
  - TX -> core, core -> RX timing constraints
  - Clock dedicated path not met, due to the fact we need clk on state changes
  - Now it's not perfect, but it doesn't crash any more

- Multiple efforts to allocate more D-Latches to ease the processing amount on Spartan 3E board
- i.e  -  update counter increments of 4 instead of 1, so just need to r.c + 3 downto r.c instead of r.c * 4 + 3 downto r.c
       -  seperate processing stages in core, into multiple stages one afeter each other, each focusing on part of the core
       -  use rising edge of clock to init processing, and use falling edge of clock to refresh states, to archive better speed


Feb 1st update:

* Recently got the new Arty-A7 35T board and updated to Artix-7 platform

* Timing issues resolved!
  - It's a clock sync problem, the core module using the internal FPGA clock is always 2x or 4x faster than the RX TX clock. Hence, there requires a buffer in the middle the seperates them. one cannot just directly pass on the signal
  - The Spartan 3E board is different from the Arty A7 in a sense that the ip chip on the Spartan 3E has a seperate osillator, while the Arty A7 one requires a reference clock input from the FPGA clk
  - Hence, if were to work on the Spartan 3E, another sync shall be required
  - Temporarily, we fix the clk on the core module to be as slow as that of the TX RX. However, this is a huge waste of processing power. We can potentially speed up the core, but then we need a FIFO module on both sides to act as buffers

* Introduce IP header checksum
  - Switched NIC cards in the middle of the process due to Arty A7 board needs a reference clk on the ip chip, but the reset design doesn't input such clock, causing the interface to crash on reset.
  - That's due to negotiation of PHY level speed on the interface not successful.
  - Thus I switched from USB-Type-C Realtek card to Ethernet port on the back of my Mac Pro, onto NIC card from Apple AQC107-AFW
  - There's a caveat, the NIC card from Apple parses pkt to IP lvl and discards pkts without correct IP header checksum, causing all my pkts to be voided.
  - CHIPScope! Life saver! A tool provided by Xilinx Vivado to debug on hardware, triggered by triggers, and sample 1024 / 2048 depth of signals on a given netlist
  - NETList! new knowledge of synthesied VHDL code -> netlist -> impl on the board
  - impl ip checksum finally and infra shall be complete

Some analysis on the interface crashing,
  - it wouldn't crash on the new Arty A7 board anymore (after Feb 1 clock sync fixes), whether it's possible on the old board
  - we assume it's a sort of buffer, if there's enough packets to be discarded by the NIC, 
  - clock sync issues previously causing something wrong like a memory corruption, you would say if (a = 1) out = 1 else out = 2, and out would be neither 1 nor 2. So the out is necessarily memory corrupted.
  - Assume then the sent pkts would contain all sorts of corrupted bytes, including even on the PHY level, and upper levels, some we are lucky enough to see on Wireshark, while some not. (we don't have chipscope on the older Spartan3E, or nor I'm aware of on the older ISE Webpack IDE)./
  - the NIC would then doubt it's decision and re-negotiate PHY with the FPGA. There're chances where the PHY on the FPGA is not clocked correctly to re-negotiate (i.e. fail to clk correctly to send negotiation bytes), then the macOS driver deems the interface void, hence totally halting the interface and deems it void (unconnected)


Some more enlightment / decision we can make:
- MicroBlaze! could be promising if we don't focus that much on performance, i.e. we can even deploy a TCP server on it as a processor
- FPGA-cores, some commercial cores available, that supports remote programming
- verilog-ethernet a very good project for general deployment of ethernet/udp stack
- VHDL/Verilog, Ada, pascal like grammar, which i used to do as a kid, very different from C, force me to think differently, strongly-typed so I can really find bugs at syn stage
- Mac Pro's USB Type C NIC is from Realtek, while the physical 10Gigabit NIC is from Apple, behave very differently!
- MII interface, 25 Mhz * 4bits supports 100Mbits!, some other interface RMII, GMII, SGMII, could have further expansions and conversions.
- FPGA borad choice, Arty A7 over others, sensible budget, all we need, neer firmware and comprehensive debug support
- Simulator ISim vs modelsim.
- UDP stack offloader VS. DNS anomaly detection, why these choices

SW:
- Using linux raw socket to send packets, and then bridge the linux interface in VM with the physical interface on macOS, with version upgrade, in 10.15, VMWare used to do the bridging in VM, now it's integrated with the macOS system, took a while to figure out.
- In the very early stage when ethernet II / I payload are of fixed length, with some inst. to turn on of LED, we used custom C++ program to send and receive ping raw ethernet packets, including raw_bdcast, raw_sender, raw_receiver
- We always use C++ program dns_sender.out to figure out MAC address and test pkts (probing) the FPGA logic and reflect on LED lights ( seven segment with Arty A7) expansion.
- We have ported some code from Github on Ethernet CRC32 to test the ethernet CRC32 generator in VHDL on iSim, and then deploy to FPGA. (we hardcoded Ethernet CRC32 to test snd first), later on porting using Easics BV CRC generator (performant! parallel generation!).


Feb 2nd / 3rd 03:22 Log:
FIFO on rcv and snd done.
The FIFO would act as a sync between a slower E_RX_CLK and clk, the phy clk is four times slower, so it writes to the buffer whenever it finishes work. and the core module fetches from the buffer, to avoid clk sync issue among cores and phy. So as to not slow the core down by 4 times.

The FIFO design is rather complicated as it includes a synchroniser and a FIFO. There are error in cases i.e. w_en from RX_CLK, at 25Mhz, would hold for 4 actual clk cycles, causing the item to be written four times. To avoid that, we need a separate counter (b.r_en_dcnt/b.w_en_dcnt) for read / write logic for FIFO_rcv and FIFO_snd to accommodate the issue.

We designed FIFO to output buf_full / buf_not_empty (why not buf_empty)? buf_not_empty can be used as datavalid/ data pending logic for the next module once in idle state. (with b.c)

FIFO is also designed as a ring buffer, with a given size of 8 pkts in buffer (Might need Block RAM FIFO in the future). with w_index, r_index going around the ring to track the queue in ringbuffer.

Bug so far, the FIFO doesn't work perfectly, sometimes check fails and I would all of a sudden receive multiple duplicate packets out of nowhere. 
This FIFO error is observable at faster speeds, i.e. 100ms / per packet. less observable at very high speed. Could be due to timing constraints failing? Seems to be. I made a change to alleviate the bug by fixing the timing. 
Could consider lowering clk speed to 50Mhz, or try something else.

SW side:

update upd_sender.cc to support args parsing,
three args at the moment
-p packet type DNS or UDP
-t time interval, in ms, fatest pkt stream 1ms, default 1s
-d daemon mode, or single pkt mode, default in single pkt mode

Feb 10th Log:
Fixed FIFO ring buffer by reducing FIFO buffer size. This is suspected to be a timing issue, as the large FIFO buf size would cause issue in the buffer counter, reading the buffer would bypass the decrement check and let the buffer count go to max, hence sending "buffer_size" amount of packets altogether in a bugged time.

Solved a timing constraint fail by introducing more pipeline and intermediate variable on calculating IP checksum.

SW side:
impl s: send mode, to replace dameon mode, now we can send once, send dameon, or send changing to preopare for upcoming filtering logic
Also have makefile, make building easier

Feb 11th Log:
Discovered the fact that clock sync between clk and E_TX_CLK. If core stages utilises odd number of clk cycles, it can slip in an update before send clk gets triggered. Which then results in correct behaviour, however, if it collides (i.e. clk has even number of cycles), then there's possibility to have two sends at the same time BUGGY!.

Feb 15th Log:
IP and UDP seem to have different bitwise endianess, bug fixed
UDP -> 0xab0f -> receive order on MII baf0
IP -> 0xab20 -> receive order ab20

Feb 18th Log:
Finish implementation of admin packet. It's only filtering on MAC address apparently. But the src mac filtering seems to work. Next we need to test dstmac as well.

Feb 19th Log:
Fixed a weird bug when changing various different IP address. This is due to the stale value on the wire / PHY gives 5, which accidentally collides with 5 as preamble. We need to reset the state of the parser on E_RX_DV invalid to make sure this edge case wouldn't go wrong. This is a obscure bug discovered trying various pkts as FCS last digit would be 5.

Feb 22nd Log:
Pretty evident progress on testbench. Supports multiple types of pkts.

Feb 24th Log:

slower / faster clk can be shifting for an arbitrary amount
And then, can be fixed via Using dual clock FIFO, which crosses clock domain, the count syncing wouldn't work so well and caused numerous issues over in the development

Black whitelist logic is now fixed and should perform well, as well prolonged all pipelines to fit in timing.

* Key optimisation, only stateful signals that relies on previous value, like counter, is necessary in states, other stuff can be set as buffer and seperate one-go signals to save resources and syn and impl time.

Now supports IP-based filtering

Mar 7th Log:

This bug is killing me, now fixed it.

"I literally just fixed the whole problem, it's because a signal is driving to many other signals within a clock cycle, i'm using a signal in a if statement and at the same time using it later on within the if statement, that caused the issue."

"
Hi Phil, I've finally resolved the issue
it's due the fact that a signal driving to many other signals within a clock cycle
remember (if dnsList(s.start_counter + s.counter + 1) downto ...) then sin.counter = s.counter -32?
s.counter and s.start_counter here has to be buffered to drive the signal /comparison properly
"

"
Think about a capacitance storing a value a, we have a statement
if (a = 1) then b = a; With the comparison of capacitance brings the leakage of ions, so b = a might not succeed. so b goes into a meta state after the execution. 

It depends on several factors, the distance between b and a, the comparison mux and a being a DRAM or SRAM. 

If the distance is too long / or comparison takes too long / a is a DRAM, there's a possiblity that the leakage of voltage drops a below half and hence causing b = 0.

If you buffer a in buf_a, and say if (a = 1) b = buf_a, the capacitance gets refreshed and the 1 value shall be assigned properly

Update to last line, buf_a = a; (first clock cycle) if (a = 1) b = buf_a; (second clock cycle)
"



TODO:

Impl test bench for each of the moduels, and have integrated testing
Auth for admin packet
